generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  // This establishes the other side of the relation
  userStations  UserStation[]

  role     Role    @default(USER)
  approved Boolean @default(false)
}

enum Role {
  USER
  ADMIN
}

model AppSettings {
  id               String  @id @default(cuid())
  approvalRequired Boolean @default(true)
}

model Station {
  id      Int           @id // WillyWeather location id
  name    String
  region  String?
  state   String?
  lat     Float?
  lng     Float?
  users   UserStation[]
}

model UserStation {
  id        Int      @id @default(autoincrement())
  userId    String   // <-- This MUST be a String
  stationId Int
  addedAt   DateTime @default(now())

  // This defines the relationship to the User model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)

  // This ensures a user can't add the same station twice
  @@unique([userId, stationId])
}